{
  "ver": "1.0.25",
  "uuid": "81b544cb-53fa-4776-957f-afe6909710f6",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 outColor;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  outColor = vec4(1,0,0,1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec4 outColor;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec3 u_color;\nfloat u_line_size;\nvec2 textureSize;\nfloat getBackArea()\n{\n  vec4 color_up;\n  vec4 color_down;\n  vec4 color_left;\n  vec4 color_right;\n  vec4 color_up_left;\n  vec4 color_up_right;\n  vec4 color_down_left;\n  vec4 color_down_right;\n  float total = 0.0;\n  color_up = texture2D(texture, v_uv0 + vec2(0, u_line_size));\n  color_down = texture2D(texture, v_uv0 - vec2(0, u_line_size));\n  color_left = texture2D(texture, v_uv0 - vec2(u_line_size, 0));\n  color_right = texture2D(texture, v_uv0 + vec2(u_line_size, 0));\n  color_up_left = texture2D(texture, v_uv0 + vec2(u_line_size, -u_line_size));\n  color_up_right = texture2D(texture, v_uv0 + vec2(u_line_size, u_line_size));\n  color_down_left = texture2D(texture, v_uv0 + vec2(-u_line_size, -u_line_size));\n  color_down_right = texture2D(texture, v_uv0 + vec2(-u_line_size, u_line_size));\n  total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  if (total >= 0.5) return 1.0;\n  return 0.0;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  u_color = vec3(1,0,0);\n  u_line_size = 0.0007;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  if (o.a < 0.5)\n  {\n    float isBack = getBackArea();\n    if (isBack > 0.0)\n    {\n      o = vec4(1,0,0, 1);\n    }\n  }\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nvarying vec4 outColor;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  outColor = vec4(1,0,0,1);\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nvarying vec4 outColor;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvec3 u_color;\nfloat u_line_size;\nvec2 textureSize;\nfloat getBackArea()\n{\n  vec4 color_up;\n  vec4 color_down;\n  vec4 color_left;\n  vec4 color_right;\n  vec4 color_up_left;\n  vec4 color_up_right;\n  vec4 color_down_left;\n  vec4 color_down_right;\n  float total = 0.0;\n  color_up = texture2D(texture, v_uv0 + vec2(0, u_line_size));\n  color_down = texture(texture, v_uv0 - vec2(0, u_line_size));\n  color_left = texture(texture, v_uv0 - vec2(u_line_size, 0));\n  color_right = texture(texture, v_uv0 + vec2(u_line_size, 0));\n  color_up_left = texture(texture, v_uv0 + vec2(u_line_size, -u_line_size));\n  color_up_right = texture(texture, v_uv0 + vec2(u_line_size, u_line_size));\n  color_down_left = texture(texture, v_uv0 + vec2(-u_line_size, -u_line_size));\n  color_down_right = texture(texture, v_uv0 + vec2(-u_line_size, u_line_size));\n  total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a;\n  if (total >= 0.5) return 1.0;\n  return 0.0;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  u_color = vec3(1,0,0);\n  u_line_size = 0.0007;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  if (o.a < 0.5)\n  {\n    float isBack = getBackArea();\n    if (isBack > 0.0)\n    {\n      o = vec4(1,0,0, 1);\n    }\n  }\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}