{
  "ver": "1.0.25",
  "uuid": "f6bd92d0-e4bf-4c87-93cc-247a2752858c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D distortTex;\n#endif\n#if MY_DATA\n  uniform float distortRotateSpeed;\nuniform float distrotStrength;\n#endif\nvec3 unpackNormalmap(vec4 packednormal)\n{\n    return packednormal.xyz * 2.0 - 1.0;\n}\nvec2 rotate2D(vec2 _uv, float speed)\n{\n    vec2 uv = _uv.xy - vec2(0.5, 0.5);\n    uv = vec2( uv.x*cos(speed) - uv.y*sin(speed), uv.x*sin(speed) + uv.y*cos(speed) );\n    uv += vec2(0.5, 0.5);\n    uv.x = clamp(uv.x, 0.0, 1.0);\n    uv.y = clamp(uv.y, 0.0, 1.0);\n    return uv;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0.xy;\n  vec2 distortVal = unpackNormalmap(texture2D(distortTex, uv)).rg;\n  uv = uv + (distortVal * distrotStrength);\n  uv = rotate2D(uv, cc_time.x*distortRotateSpeed);\n  o = v_color * texture2D(texture, uv);\n  o = vec4(o.rgb*1.5, o.a);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D distortTex;\n#endif\n#if MY_DATA\n  uniform MyData {\n    float distortRotateSpeed;\n    float distrotStrength;\n  };\n#endif\nvec3 unpackNormalmap(vec4 packednormal)\n{\n    return packednormal.xyz * 2.0 - 1.0;\n}\nvec2 rotate2D(vec2 _uv, float speed)\n{\n    vec2 uv = _uv.xy - vec2(0.5, 0.5);\n    uv = vec2( uv.x*cos(speed) - uv.y*sin(speed), uv.x*sin(speed) + uv.y*cos(speed) );\n    uv += vec2(0.5, 0.5);\n    uv.x = clamp(uv.x, 0.0, 1.0);\n    uv.y = clamp(uv.y, 0.0, 1.0);\n    return uv;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0.xy;\n  vec2 distortVal = unpackNormalmap(texture2D(distortTex, uv)).rg;\n  uv = uv + (distortVal * distrotStrength);\n  uv = rotate2D(uv, cc_time.x*distortRotateSpeed);\n  o = v_color * texture2D(texture, uv);\n  o = vec4(o.rgb*1.5, o.a);\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}