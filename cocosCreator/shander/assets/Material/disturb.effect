// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        appTime: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;

  out vec4 v_color;

  #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
      pos = cc_matViewProj * cc_matWorld * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
  #endif

  #if MY_DATA
    uniform MyData {
      float appTime;
    };
  #endif

  // 随机值
	float randomRange(vec2 seed, float max, float min) 
  {
    //sin(dot(co.xy , vec2(16.336, 78.233)) * 43758.5453) * 0.5 + 0.5;
		float random = fract(sin( dot(seed, vec2(12.9898, 78.233)) ) * 43758.5453);
    return mix(min, max, random);
	}

  void main () 
  {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    if (o.a != 0.0)
    {
      vec2 mul = v_uv0.xy * sin(cc_time.x);
		  float r = randomRange(mul, 1.0, 0.0);

      vec4 c = vec4(r, r, r, 1); 
      o = mix(o, c, 1.0);
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
