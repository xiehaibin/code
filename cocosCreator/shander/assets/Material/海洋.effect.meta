{
  "ver": "1.0.25",
  "uuid": "04ab2424-73c1-4daf-a9c4-828801eccb65",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nconst float _SeaHigh = 0.6;\nconst float _LayerGapPower = 0.5;\nconst vec4 _TSkyColor = vec4(0.0,   0.196, 0.615, 1.0);\nconst vec4 _BSkyColor = vec4(0.0,   0.807, 0.980, 1.0);\nconst vec4 _TSeaColor = vec4(0.768, 0.925, 1.0,   1.0);\nconst vec4 _BSeaColor = vec4(0.0,   0.200, 0.317, 1.0);\nconst vec4  _SkyLineColor = vec4(1.0, 1.0, 1.0, 1.0);\nconst float _SkyLinePower = 10.0;\nconst float _SkyLineFactor = 1.0;\nconst float LAYER_COUNT = 12.0;\nconst float _PI2 = 6.18;\nconst float _AmptPower  = 0.2;\nconst float _AmptFactor = 0.01;\nfloat _SubWaveAmptFactor = 0.2;\nfloat _SubWaveFrequenceFactor = 0.6;\nfloat _SubeWaveOffsetBaseSpd    = 1.6;\nfloat _SubeWaveOffsetHashFactor = 1.8;\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Remap(float oa, float ob,   float na, float nb,  float val)\n{\n    return (val-oa)/(ob-oa) * (nb-na) + na;\n}\nfloat Wave(float x, float layer)\n{\n    float percent = 1.0 - layer/LAYER_COUNT;\n    float frequence = _PI2 * (layer + 3.0);\n    float amptitude = pow(percent, _AmptPower) * _AmptFactor;\n    float offset = _PI2 * Hash11(layer);\n    float result = 0.0;\n    float spd = _SubeWaveOffsetBaseSpd;\n    for (float i = 0.0; i < 6.0; i++)\n    {\n        result += sin(x*frequence  +  offset  +  Hash11(i + offset)*_PI2  +  cc_time.x*_PI2*spd) * amptitude;\n        frequence *= _SubWaveFrequenceFactor;\n        amptitude *= _SubWaveAmptFactor;\n        spd       *= _SubeWaveOffsetHashFactor;\n    }\n    return result;\n}\nvec4 DrawSea(vec2 uv)\n{\n    float y = 1.0 - uv.y;\n    float layerId = LAYER_COUNT;\n    for (float layer = 0.0; layer < LAYER_COUNT; layer++)\n    {\n        float percent = layer/LAYER_COUNT;\n        percent = pow(percent, _LayerGapPower);\n        float curLayerHigh = percent * _SeaHigh;\n        curLayerHigh += Wave(uv.x, layer);\n        if (y < curLayerHigh)\n        {\n            layerId = layer;\n            break;\n        }\n    }\n    return mix(_BSeaColor, _TSeaColor, layerId/LAYER_COUNT);\n}\nvec4 DrawSky(float y)\n{\n    float val = Remap(_SeaHigh, 1.0,  0.0, 1.0,  y);\n    vec4 color = mix(_TSkyColor, _BSkyColor, val);\n    return color + _SkyLineColor * pow(1.0-val, _SkyLinePower) * _SkyLineFactor;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float y = 1.0 - v_uv0.y;\n  if (y >_SeaHigh)\n  {\n    o = DrawSky(y);\n  }\n  else\n  {\n    o = DrawSea(v_uv0);\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nconst float _SeaHigh = 0.6;\nconst float _LayerGapPower = 0.5;\nconst vec4 _TSkyColor = vec4(0.0,   0.196, 0.615, 1.0);\nconst vec4 _BSkyColor = vec4(0.0,   0.807, 0.980, 1.0);\nconst vec4 _TSeaColor = vec4(0.768, 0.925, 1.0,   1.0);\nconst vec4 _BSeaColor = vec4(0.0,   0.200, 0.317, 1.0);\nconst vec4  _SkyLineColor = vec4(1.0, 1.0, 1.0, 1.0);\nconst float _SkyLinePower = 10.0;\nconst float _SkyLineFactor = 1.0;\nconst float LAYER_COUNT = 12.0;\nconst float _PI2 = 6.18;\nconst float _AmptPower  = 0.2;\nconst float _AmptFactor = 0.01;\nfloat _SubWaveAmptFactor = 0.2;\nfloat _SubWaveFrequenceFactor = 0.6;\nfloat _SubeWaveOffsetBaseSpd    = 1.6;\nfloat _SubeWaveOffsetHashFactor = 1.8;\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Remap(float oa, float ob,   float na, float nb,  float val)\n{\n    return (val-oa)/(ob-oa) * (nb-na) + na;\n}\nfloat Wave(float x, float layer)\n{\n    float percent = 1.0 - layer/LAYER_COUNT;\n    float frequence = _PI2 * (layer + 3.0);\n    float amptitude = pow(percent, _AmptPower) * _AmptFactor;\n    float offset = _PI2 * Hash11(layer);\n    float result = 0.0;\n    float spd = _SubeWaveOffsetBaseSpd;\n    for (float i = 0.0; i < 6.0; i++)\n    {\n        result += sin(x*frequence  +  offset  +  Hash11(i + offset)*_PI2  +  cc_time.x*_PI2*spd) * amptitude;\n        frequence *= _SubWaveFrequenceFactor;\n        amptitude *= _SubWaveAmptFactor;\n        spd       *= _SubeWaveOffsetHashFactor;\n    }\n    return result;\n}\nvec4 DrawSea(vec2 uv)\n{\n    float y = 1.0 - uv.y;\n    float layerId = LAYER_COUNT;\n    for (float layer = 0.0; layer < LAYER_COUNT; layer++)\n    {\n        float percent = layer/LAYER_COUNT;\n        percent = pow(percent, _LayerGapPower);\n        float curLayerHigh = percent * _SeaHigh;\n        curLayerHigh += Wave(uv.x, layer);\n        if (y < curLayerHigh)\n        {\n            layerId = layer;\n            break;\n        }\n    }\n    return mix(_BSeaColor, _TSeaColor, layerId/LAYER_COUNT);\n}\nvec4 DrawSky(float y)\n{\n    float val = Remap(_SeaHigh, 1.0,  0.0, 1.0,  y);\n    vec4 color = mix(_TSkyColor, _BSkyColor, val);\n    return color + _SkyLineColor * pow(1.0-val, _SkyLinePower) * _SkyLineFactor;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float y = 1.0 - v_uv0.y;\n  if (y >_SeaHigh)\n  {\n    o = DrawSky(y);\n  }\n  else\n  {\n    o = DrawSea(v_uv0);\n  }\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}