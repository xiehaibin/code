// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        normalTex: { value: white }
        alphaThreshold: { value: 0.5 }
        distortStrength: { value: 0.5 }
        fade: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    uniform sampler2D texture;
    uniform sampler2D normalTex;
  #endif

  #if MY_DATA
    uniform MyData {
      float distortStrength;
      float fade;
    };
  #endif

  //它是对法线纹理的采样结果的一个反映射操作，其对应的法线纹理需要设置为Normal map的格式
  vec3 unpackNormalmap(vec4 packednormal)
  {
      //packednormal.x *= packednormal.w;
      //vec3 normal;
      //normal.xy = packednormal.xy * 2.0 - 1.0;
      //normal.z = sqrt(1.0 - clamp(dot(normal.xy, normal.xy), 0.0, 1.0));
      //return normal;

      return packednormal.xyz * 2.0 - 1.0;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      //CCTexture(texture, v_uv0, o);
    #endif

    vec2 uv = v_uv0.xy * vec2(1.0, 1.0);
		vec2 distortVal = unpackNormalmap(texture2D(normalTex, uv)).rg;  //法线贴图

		vec2 grabUV = v_uv0.xy + (distortVal * distortStrength * fade);
		vec4 screenColor = texture2D(texture, grabUV);  

	  o = v_color * screenColor;
    //float c = v_color.r * v_color.g * v_color.b;
    //o = vec4(c,c,c, o.a);

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
