{
  "ver": "1.0.25",
  "uuid": "293280df-741e-4e72-a237-4ada84d4bf67",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat bightness;\nfloat blurAmount;\nvec4 draw(vec2 uv)\n{\n  return texture2D(texture, uv).rgba;\n}\nfloat rand(vec2 co)\n{\n  return sin(dot(co.xy , vec2(16.336, 78.233)) * 43758.5453) * 0.5 + 0.5;\n}\nvec4 dim(vec4 col, float factor)\n{\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  blurAmount = 0.5;\n  bightness = 0.5;\n    vec2 uv = v_uv0.xy;\n  float bluramount = 0.06 * blurAmount;\n  vec4 blurred_image = vec4(0.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  for(float i = 0.0; i < 16.0; i ++ )\n  {\n    vec2 q = vec2(cos(degrees((i/16.0) * 360.0)), sin(degrees((i/16.0)*360.0))) * (rand(vec2(i, uv.x + uv.y)) + bluramount);\n    vec2 uv2 = uv + (q * bluramount);\n    blurred_image += draw(uv2) / 2.0;\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + bluramount);\n    uv2 = uv + (q * bluramount);\n    blurred_image += draw(uv2) / 2.0;\n  }\n  blurred_image /= 16.0;\n  blurred_image = dim(blurred_image, bightness);\n  ALPHA_TEST(o);\n  gl_FragColor = vec4(blurred_image);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat bightness;\nfloat blurAmount;\nvec4 draw(vec2 uv)\n{\n  return texture2D(texture, uv).rgba;\n}\nfloat rand(vec2 co)\n{\n  return sin(dot(co.xy , vec2(16.336, 78.233)) * 43758.5453) * 0.5 + 0.5;\n}\nvec4 dim(vec4 col, float factor)\n{\n  return vec4(col.r * factor, col.g * factor, col.b * factor, col.a);\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  blurAmount = 0.5;\n  bightness = 0.5;\n    vec2 uv = v_uv0.xy;\n  float bluramount = 0.06 * blurAmount;\n  vec4 blurred_image = vec4(0.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  for(float i = 0.0; i < 16.0; i ++ )\n  {\n    vec2 q = vec2(cos(degrees((i/16.0) * 360.0)), sin(degrees((i/16.0)*360.0))) * (rand(vec2(i, uv.x + uv.y)) + bluramount);\n    vec2 uv2 = uv + (q * bluramount);\n    blurred_image += draw(uv2) / 2.0;\n    q = vec2(cos(degrees((i / 16.0) * 360.0)), sin(degrees((i / 16.0) * 360.0))) * (rand(vec2(i + 2.0, uv.x + uv.y + 24.0)) + bluramount);\n    uv2 = uv + (q * bluramount);\n    blurred_image += draw(uv2) / 2.0;\n  }\n  blurred_image /= 16.0;\n  blurred_image = dim(blurred_image, bightness);\n  ALPHA_TEST(o);\n  gl_FragColor = vec4(blurred_image);\n}"
      }
    }
  ],
  "subMetas": {}
}