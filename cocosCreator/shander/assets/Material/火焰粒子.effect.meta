{
  "ver": "1.0.25",
  "uuid": "8c5dff05-8234-49fd-af9f-4db55ecc48b1",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat DrawCircle(vec2 uv, vec2 offset, vec2 size, vec2 ssMinMax)\n{\n  uv -= 0.5;\n  uv -= offset;\n  uv /= size;\n  float circle = 1.0- length(uv) * 2.0;\n  return smoothstep(ssMinMax.x, ssMinMax.y, circle);\n}\nfloat drawParticles(vec2 rawUV, float layerId)\n{\n    float layerHash = Hash11(layerId);\n    float time = cc_time.x * (4.5 + layerId*0.5) + layerHash;\n    float gridSize = 10.0;\n    vec2 uv = rawUV;\n    uv *= gridSize;\n    uv.y += time;\n    uv.x += sin(Hash11(floor(uv).y + layerId)*6.28 + cc_time.x*3.0) * 0.5;\n    vec2 gridId = floor(uv);\n    vec2 hash2 = Hash22(gridId + layerHash);\n    uv = fract(uv);\n    float deg = (time * 1.3 * (step(hash2.y, 0.5) * 2.0 - 1.0)) + hash2.x*6.28;\n    vec2 offset = vec2(cos(deg), sin(deg)) * 0.2;\n    float mask = clamp((gridId.y-time)/gridSize, 0.2, 0.5);\n    mask = clamp(pow(mask, 0.5) * mix(1.0, 2.0, hash2.x), 0.1, 1.5);\n    mask = pow(mask, 3.2);\n    mask *= clamp(mix(0.0, gridSize, 1.0-rawUV.y), 0.0, 1.0);\n    float sizeHash = Hash12(gridId + vec2(11.11, 54.12) * (layerId + 1.0));\n    float sizeScale = sin(cc_time.x*10.0 + sizeHash*6.28) * 0.5 + 0.5;\n    float s = 0.12 * mix(0.3, 1.2, sizeScale) * mask;\n    vec2 size = vec2(s, s);\n    vec2 minMax = vec2(0, 1.0);\n    float c = DrawCircle(uv, offset, size, minMax);\n    return c;\n}\nvec4 LerpColor(float t, vec4 a, vec4 b)\n{\n  return mix(a, b, clamp(t, 0.0, 1.0));\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float mask = 0.0;\n  for (float i = 0.0; i < 3.0; i++)\n  {\n    mask += drawParticles(v_uv0, i);\n  }\n  if (mask > 0.0)\n  {\n    o = LerpColor(mask, vec4(1.0, 0, 0, 1.0), vec4(1.0, 0.6, 0.0, 1.0));\n    o *= vec4(mask, mask, mask, mask);\n  }\n  else\n  {\n    o = vec4(mask, mask, mask, 0.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat DrawCircle(vec2 uv, vec2 offset, vec2 size, vec2 ssMinMax)\n{\n  uv -= 0.5;\n  uv -= offset;\n  uv /= size;\n  float circle = 1.0- length(uv) * 2.0;\n  return smoothstep(ssMinMax.x, ssMinMax.y, circle);\n}\nfloat drawParticles(vec2 rawUV, float layerId)\n{\n    float layerHash = Hash11(layerId);\n    float time = cc_time.x * (4.5 + layerId*0.5) + layerHash;\n    float gridSize = 10.0;\n    vec2 uv = rawUV;\n    uv *= gridSize;\n    uv.y += time;\n    uv.x += sin(Hash11(floor(uv).y + layerId)*6.28 + cc_time.x*3.0) * 0.5;\n    vec2 gridId = floor(uv);\n    vec2 hash2 = Hash22(gridId + layerHash);\n    uv = fract(uv);\n    float deg = (time * 1.3 * (step(hash2.y, 0.5) * 2.0 - 1.0)) + hash2.x*6.28;\n    vec2 offset = vec2(cos(deg), sin(deg)) * 0.2;\n    float mask = clamp((gridId.y-time)/gridSize, 0.2, 0.5);\n    mask = clamp(pow(mask, 0.5) * mix(1.0, 2.0, hash2.x), 0.1, 1.5);\n    mask = pow(mask, 3.2);\n    mask *= clamp(mix(0.0, gridSize, 1.0-rawUV.y), 0.0, 1.0);\n    float sizeHash = Hash12(gridId + vec2(11.11, 54.12) * (layerId + 1.0));\n    float sizeScale = sin(cc_time.x*10.0 + sizeHash*6.28) * 0.5 + 0.5;\n    float s = 0.12 * mix(0.3, 1.2, sizeScale) * mask;\n    vec2 size = vec2(s, s);\n    vec2 minMax = vec2(0, 1.0);\n    float c = DrawCircle(uv, offset, size, minMax);\n    return c;\n}\nvec4 LerpColor(float t, vec4 a, vec4 b)\n{\n  return mix(a, b, clamp(t, 0.0, 1.0));\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float mask = 0.0;\n  for (float i = 0.0; i < 3.0; i++)\n  {\n    mask += drawParticles(v_uv0, i);\n  }\n  if (mask > 0.0)\n  {\n    o = LerpColor(mask, vec4(1.0, 0, 0, 1.0), vec4(1.0, 0.6, 0.0, 1.0));\n    o *= vec4(mask, mask, mask, mask);\n  }\n  else\n  {\n    o = vec4(mask, mask, mask, 0.0);\n  }\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}