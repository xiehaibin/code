{
  "ver": "1.0.25",
  "uuid": "41969bd8-5937-42d7-8e65-cc0ca9f5d7ec",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D dissolveTex;\n#endif\n#if MY_DATA\n  uniform float dissolveProgress;\n#endif\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float dissolveRange = 0.5;\n  vec4 c = vec4(0.5, 0.0, 0.0, 1.0);\n  #if USE_TEXTURE\n  #endif\n  vec2 mainUV = v_uv0.xy;\n  vec2 dissolveUV = v_uv0.xy;\n  float progress = (1.0 - dissolveProgress) - 0.1;\n  float dissolveVal = texture2D(dissolveTex, dissolveUV).r;\n  vec4 mainColor = texture2D(texture,  mainUV);\n  if (progress < dissolveVal || mainColor.a == 0.0)\n    discard;\n  float dissolveBorderVal = clamp((progress - dissolveVal)*4.0, 0.0, 1.0);\n  dissolveBorderVal = smoothstep(0.0, dissolveRange, dissolveBorderVal);\n  vec4 finalColor = mix(o, mainColor, dissolveBorderVal);\n  o = finalColor;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  uniform sampler2D dissolveTex;\n#endif\n#if MY_DATA\n  uniform MyData {\n    float dissolveProgress;\n  };\n#endif\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  float dissolveRange = 0.5;\n  vec4 c = vec4(0.5, 0.0, 0.0, 1.0);\n  #if USE_TEXTURE\n  #endif\n  vec2 mainUV = v_uv0.xy;\n  vec2 dissolveUV = v_uv0.xy;\n  float progress = (1.0 - dissolveProgress) - 0.1;\n  float dissolveVal = texture2D(dissolveTex, dissolveUV).r;\n  vec4 mainColor = texture2D(texture,  mainUV);\n  if (progress < dissolveVal || mainColor.a == 0.0)\n    discard;\n  float dissolveBorderVal = clamp((progress - dissolveVal)*4.0, 0.0, 1.0);\n  dissolveBorderVal = smoothstep(0.0, dissolveRange, dissolveBorderVal);\n  vec4 finalColor = mix(o, mainColor, dissolveBorderVal);\n  o = finalColor;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}