// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  varying vec4 outColor;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    outColor = vec4(1,0,0,1);

    //gl_PointSize = 8.0;

    // gl_Position 内置变量
    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  varying vec4 outColor;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  vec3 u_color;	// 描边颜色
  float u_line_size;	//描边偏移大小
  vec2 textureSize;

  // 获得背面区域
  float getBackArea()
  {
    vec4 color_up;
    vec4 color_down;
    vec4 color_left; 
    vec4 color_right; 
    vec4 color_up_left; 
    vec4 color_up_right; 
    vec4 color_down_left; 
    vec4 color_down_right; 
    float total = 0.0; 

    color_up = texture2D(texture, v_uv0 + vec2(0, u_line_size)); 
    color_down = texture(texture, v_uv0 - vec2(0, u_line_size)); 
    color_left = texture(texture, v_uv0 - vec2(u_line_size, 0)); 
    color_right = texture(texture, v_uv0 + vec2(u_line_size, 0)); 

    color_up_left = texture(texture, v_uv0 + vec2(u_line_size, -u_line_size)); 
    color_up_right = texture(texture, v_uv0 + vec2(u_line_size, u_line_size)); 
    color_down_left = texture(texture, v_uv0 + vec2(-u_line_size, -u_line_size)); 
    color_down_right = texture(texture, v_uv0 + vec2(-u_line_size, u_line_size)); 

    total = color_right.a + color_left.a + color_down.a + color_up.a + color_up_left.a + color_up_right.a + color_down_left.a + color_down_right.a; 
    //return clamp(total, 0.0, 1.0);

    if (total >= 0.5) return 1.0;
    return 0.0;
  }

  void main () 
  {
    vec4 o = vec4(1, 1, 1, 1);
    u_color = vec3(1,0,0);
    u_line_size = 0.0007;

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif


    ALPHA_TEST(o);
    //if(gl_FragCoord.y < 100.0) discard;
    //o = gl_FrontFacing ? o*vec4(0,1,0,0.5) : o*vec4(0,0,1,0.5);

    if (o.a < 0.5)
    {
      float isBack = getBackArea();
      if (isBack > 0.0) 
      {
        o = vec4(1,0,0, 1);
        // 正常的rgb + 正常的透明区域 * 背面颜色 * 描边颜色
        //vec3 c1 = vec3(o.rgb + ((1.0 - o.a) * u_color * isBack));
        //o =  vec4(o.rgb + ((1.0 - o.a) * u_color * isBack), 1.0*isBack);
      }
    }
   
    gl_FragColor = o;
  }
}%
