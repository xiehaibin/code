// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  //#include <cc-local>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  float Hash11(float p)
  {
    vec3 p3 = fract(vec3(p,p,p) * 0.10310);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z); 
  }

  float Hash12(vec2 p)
  {
      vec3 p3  = fract(vec3(p.xyx) * 0.1031);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
  }

  vec2 Hash22(vec2 val)
  {
    //fract 获取x的小数部分
    float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);
    float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);
    return vec2(x, y);
  }

  float DrawCircle(vec2 uv, vec2 offset, vec2 size, vec2 ssMinMax)
  {
    uv -= 0.5;
    uv -= offset;
    uv /= size;
    float circle = 1.0- length(uv) * 2.0;
    return smoothstep(ssMinMax.x, ssMinMax.y, circle);
  }

  float drawParticles(vec2 rawUV, float layerId)
  {
      float layerHash = Hash11(layerId);
      float time = cc_time.x * (4.5 + layerId*0.5) + layerHash;
      float gridSize = 10.0;
      vec2 uv = rawUV;

      uv *= gridSize;

      uv.y += time;
      uv.x += sin(Hash11(floor(uv).y + layerId)*6.28 + cc_time.x*3.0) * 0.5;

      vec2 gridId = floor(uv);
      vec2 hash2 = Hash22(gridId + layerHash);
      uv = fract(uv);

      //(step(hash2.y, 0.5) * 2.0 - 1.0) => -1 ~ 1
      float deg = (time * 1.3 * (step(hash2.y, 0.5) * 2.0 - 1.0)) + hash2.x*6.28;
      // 基于圆运动
      vec2 offset = vec2(cos(deg), sin(deg)) * 0.2;

      float mask = clamp((gridId.y-time)/gridSize, 0.2, 0.5);
      mask = clamp(pow(mask, 0.5) * mix(1.0, 2.0, hash2.x), 0.1, 1.5);
      mask = pow(mask, 3.2);
      // 小 -> 大 -> 小
      mask *= clamp(mix(0.0, gridSize, 1.0-rawUV.y), 0.0, 1.0);

      float sizeHash = Hash12(gridId + vec2(11.11, 54.12) * (layerId + 1.0));
      // 闪烁
      float sizeScale = sin(cc_time.x*10.0 + sizeHash*6.28) * 0.5 + 0.5;
      float s = 0.12 * mix(0.3, 1.2, sizeScale) * mask;

      vec2 size = vec2(s, s);
      vec2 minMax = vec2(0, 1.0);
      float c = DrawCircle(uv, offset, size, minMax);

      return c;
  }

  // 差值
  vec4 LerpColor(float t, vec4 a, vec4 b)
  {
    return mix(a, b, clamp(t, 0.0, 1.0));
  }

  void main () 
  {
    vec4 o = vec4(1, 1, 1, 1);

    float mask = 0.0;
    for (float i = 0.0; i < 3.0; i++)
    {
      mask += drawParticles(v_uv0, i);
    }
    
    if (mask > 0.0)
    {
      o = LerpColor(mask, vec4(1.0, 0, 0, 1.0), vec4(1.0, 0.6, 0.0, 1.0)); 
      o *= vec4(mask, mask, mask, mask);
    }
    else
    {
      o = vec4(mask, mask, mask, 0.0);
    }

    
    //CCTexture(texture, uv, o);
    //o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
