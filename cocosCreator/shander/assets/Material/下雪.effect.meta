{
  "ver": "1.0.25",
  "uuid": "587c434f-b387-4803-9afe-675de429ba2a",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float layerCount = 10.0;\nfloat uv_y = 0.0;\nfloat DrawCircle(vec2 uv, vec2 offset, vec2 size, vec2 ssMinMax)\n{\n  uv -= 0.5;\n  uv -= offset;\n  uv /= size;\n  float circle = 1.0- length(uv) * 2.0;\n  return smoothstep(ssMinMax.x, ssMinMax.y, circle);\n}\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat Hash12(vec2 p)\n{\n  vec3 p3  = fract(vec3(p.xyx) * 0.1031);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat drawSnowLayer(vec2 uv, float layerId)\n{\n    float hash1 = Hash11(layerId);\n    uv *= (2.0 + layerId);\n    uv.x += sin(cc_time.x)*0.1;\n    uv.y -= (cc_time.x*0.6 + hash1*0.8)*0.8;\n    vec2 gridId = floor(uv);\n    uv = fract(uv);\n    uv_y = uv.y;\n    vec2 offset = (Hash22(gridId) - 0.5)*0.3;\n    float hash2 = Hash12(gridId);\n    vec2 size = 0.05 + mix(vec2(0.1, 0.1), vec2(0.2, 0.2), hash2) * 1.0;\n    float lightPeroidVal = (sin(cc_time.x + hash2*6.28) * 0.5 + 0.5);\n    float light = mix(0.6, 0.8, lightPeroidVal) * pow((1.0 - layerId/layerCount), 1.0);\n    float c = DrawCircle(uv, offset, size, vec2(0.5, 1.5)) * light * 6.0;\n    return c;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  float c = 0.0;\n  for (float i = 0.0; i < layerCount; i++)\n  {\n    c = max(c, drawSnowLayer(uv, i));\n  }\n  if (c > 0.0)\n    o = vec4(1.0, 1.0, 1.0, c );\n  else\n    o = vec4(c, c, c, 0.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nconst float layerCount = 10.0;\nfloat uv_y = 0.0;\nfloat DrawCircle(vec2 uv, vec2 offset, vec2 size, vec2 ssMinMax)\n{\n  uv -= 0.5;\n  uv -= offset;\n  uv /= size;\n  float circle = 1.0- length(uv) * 2.0;\n  return smoothstep(ssMinMax.x, ssMinMax.y, circle);\n}\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat Hash12(vec2 p)\n{\n  vec3 p3  = fract(vec3(p.xyx) * 0.1031);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p,p,p) * 0.10310);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z);\n}\nfloat drawSnowLayer(vec2 uv, float layerId)\n{\n    float hash1 = Hash11(layerId);\n    uv *= (2.0 + layerId);\n    uv.x += sin(cc_time.x)*0.1;\n    uv.y -= (cc_time.x*0.6 + hash1*0.8)*0.8;\n    vec2 gridId = floor(uv);\n    uv = fract(uv);\n    uv_y = uv.y;\n    vec2 offset = (Hash22(gridId) - 0.5)*0.3;\n    float hash2 = Hash12(gridId);\n    vec2 size = 0.05 + mix(vec2(0.1, 0.1), vec2(0.2, 0.2), hash2) * 1.0;\n    float lightPeroidVal = (sin(cc_time.x + hash2*6.28) * 0.5 + 0.5);\n    float light = mix(0.6, 0.8, lightPeroidVal) * pow((1.0 - layerId/layerCount), 1.0);\n    float c = DrawCircle(uv, offset, size, vec2(0.5, 1.5)) * light * 6.0;\n    return c;\n}\nvoid main ()\n{\n  vec4 o = vec4(1, 1, 1, 1);\n  vec2 uv = v_uv0;\n  float c = 0.0;\n  for (float i = 0.0; i < layerCount; i++)\n  {\n    c = max(c, drawSnowLayer(uv, i));\n  }\n  if (c > 0.0)\n    o = vec4(1.0, 1.0, 1.0, c );\n  else\n    o = vec4(c, c, c, 0.0);\n  o *= v_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}