{
  "ver": "1.0.25",
  "uuid": "eaca43e5-ef67-46db-b7cc-33615141122f",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat iGlobalTime;\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat voronoi(vec2 x)\n{\n  vec2 n = floor(x);\n  vec2 f = fract(x);\n  float minDist = 8.0;\n  for( int j=-1; j<=1; j++ )\n  {\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2(float(i), float(j));\n        vec2  o = Hash22( n + g );\n        vec2  r = g - f + (0.5+0.5*sin(cc_time.x+6.2831*o));\n        float d = dot(r, r);\n        if(d < minDist)\n        {\n          minDist = d;\n        }\n    }\n  }\n  return sqrt(minDist);\n}\nvec4 _LerpColor0;\nvec4 _LerpColor1;\nint _BlendType;\nvec4 LerpColor(float t, vec4 a, vec4 b)\n{\n  return mix(a, b, clamp(t, 0.0, 1.0));\n}\nvoid main ()\n{\n  iGlobalTime = 1.0;\n  vec2 iResolution = vec2(1200.0, 1200.0);\n  vec2 p = vec2(gl_FragCoord.x, gl_FragCoord.y-cc_time.x*500.0) / max(iResolution.x, iResolution.y);\n  p *= 15.0;\n  float c = voronoi(p);\n  float c2 = voronoi(p*vec2(0.9, 0.7) + vec2(0.5, 0.8));\n  c *= c2;\n  c += v_uv0.y * 1.68;\n  c *= 0.65-abs(v_uv0.x-0.5);\n  c = smoothstep(0.63, 0.9, c);\n  vec4 o = vec4(c, c, c, 1.0);\n  vec4 finalColor = vec4(1.0, 1.0, 1.0, 1.0);\n  finalColor = LerpColor(c, vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 0.0, 1.0));\n  o *=  finalColor;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nfloat iGlobalTime;\nvec2 Hash22(vec2 val)\n{\n  float x = fract(sin(dot(val * 62.1, vec2(127.1, 311.7))) * 43758.5453123);\n  float y = fract(sin(dot(val , vec2(12.9898, 78.233))) * 3758.547);\n  return vec2(x, y);\n}\nfloat voronoi(vec2 x)\n{\n  vec2 n = floor(x);\n  vec2 f = fract(x);\n  float minDist = 8.0;\n  for( int j=-1; j<=1; j++ )\n  {\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2(float(i), float(j));\n        vec2  o = Hash22( n + g );\n        vec2  r = g - f + (0.5+0.5*sin(cc_time.x+6.2831*o));\n        float d = dot(r, r);\n        if(d < minDist)\n        {\n          minDist = d;\n        }\n    }\n  }\n  return sqrt(minDist);\n}\nvec4 _LerpColor0;\nvec4 _LerpColor1;\nint _BlendType;\nvec4 LerpColor(float t, vec4 a, vec4 b)\n{\n  return mix(a, b, clamp(t, 0.0, 1.0));\n}\nvoid main ()\n{\n  iGlobalTime = 1.0;\n  vec2 iResolution = vec2(1200.0, 1200.0);\n  vec2 p = vec2(gl_FragCoord.x, gl_FragCoord.y-cc_time.x*500.0) / max(iResolution.x, iResolution.y);\n  p *= 15.0;\n  float c = voronoi(p);\n  float c2 = voronoi(p*vec2(0.9, 0.7) + vec2(0.5, 0.8));\n  c *= c2;\n  c += v_uv0.y * 1.68;\n  c *= 0.65-abs(v_uv0.x-0.5);\n  c = smoothstep(0.63, 0.9, c);\n  vec4 o = vec4(c, c, c, 1.0);\n  vec4 finalColor = vec4(1.0, 1.0, 1.0, 1.0);\n  finalColor = LerpColor(c, vec4(1.0, 0.0, 0.0, 1.0), vec4(1.0, 1.0, 0.0, 1.0));\n  o *=  finalColor;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}